package graphql

// Code generated by graphql-codegen-golang ; DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
)

type Client struct {
	*http.Client
	Url string
}

// NewClient creates a GraphQL client ready to use.
func NewClient(url string) *Client {
	return &Client{
		Client: &http.Client{},
		Url:    url,
	}
}

type GraphQLOperation struct {
	Query         string          `json:"query"`
	OperationName string          `json:"operationName,omitempty"`
	Variables     json.RawMessage `json:"variables,omitempty"`
}

type GraphQLResponse struct {
	Data   json.RawMessage `json:"data,omitempty"`
	Errors []GraphQLError  `json:"errors,omitempty"`
}

type GraphQLError map[string]interface{}

func (err GraphQLError) Error() string {
	return fmt.Sprintf("graphql: %v", map[string]interface{}(err))
}

func (resp *GraphQLResponse) Error() string {
	if len(resp.Errors) == 0 {
		return ""
	}
	errs := strings.Builder{}
	for _, err := range resp.Errors {
		errs.WriteString(err.Error())
		errs.WriteString("\n")
	}
	return errs.String()
}

func execute(client *http.Client, req *http.Request) (*GraphQLResponse, error) {
	if client == nil {
		client = http.DefaultClient
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	body, err := ioutil.ReadAll(resp.Body)
	resp.Body.Close()
	if err != nil {
		return nil, err
	}
	return unmarshalGraphQLReponse(body)
}

func unmarshalGraphQLReponse(b []byte) (*GraphQLResponse, error) {
	resp := GraphQLResponse{}
	if err := json.Unmarshal(b, &resp); err != nil {
		return nil, err
	}
	if len(resp.Errors) > 0 {
		return &resp, &resp
	}
	return &resp, nil
}

//
// query GetAccount($input: CustomerAccountIdInput!)
//

type GetAccountVariables struct {
	Input CustomerAccountIdInput `json:"input"`
}

type GetAccountResponse struct {
	Account struct {
		ID          string `json:"id"`
		Alias       string `json:"alias"`
		Description string `json:"description"`
		Provider    string `json:"provider"`
		State       struct {
			Status string `json:"status"`
			Error  string `json:"error"`
		} `json:"state"`
	} `json:"account"`
}

type GetAccountRequest struct {
	*http.Request
}

func NewGetAccountRequest(url string, vars *GetAccountVariables) (*GetAccountRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `query GetAccount($input: CustomerAccountIdInput!) {
  account(input: $input) {
    id
    alias
    description
    provider
    state {
      status
      error
    }
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &GetAccountRequest{req}, nil
}

func (req *GetAccountRequest) Execute(client *http.Client) (*GetAccountResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result GetAccountResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func GetAccount(url string, client *http.Client, vars *GetAccountVariables) (*GetAccountResponse, error) {
	req, err := NewGetAccountRequest(url, vars)
	if err != nil {
		return nil, err
	}
	return req.Execute(client)
}

func (client *Client) GetAccount(vars *GetAccountVariables) (*GetAccountResponse, error) {
	return GetAccount(client.Url, client.Client, vars)
}

//
// query GetAccounts($input: CustomerAccountsInput!)
//

type GetAccountsVariables struct {
	Input CustomerAccountsInput `json:"input"`
}

type GetAccountsResponse struct {
	Accounts struct {
		Results *[]struct {
			ID          string `json:"id"`
			Alias       string `json:"alias"`
			Description string `json:"description"`
			Provider    string `json:"provider"`
			State       struct {
				Status string `json:"status"`
				Error  string `json:"error"`
			} `json:"state"`
		} `json:"results"`
	} `json:"accounts"`
}

type GetAccountsRequest struct {
	*http.Request
}

func NewGetAccountsRequest(url string, vars *GetAccountsVariables) (*GetAccountsRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `query GetAccounts($input: CustomerAccountsInput!) {
  accounts(input: $input) {
    results {
      id
      alias
      description
      provider
      state {
        status
        error
      }
    }
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &GetAccountsRequest{req}, nil
}

func (req *GetAccountsRequest) Execute(client *http.Client) (*GetAccountsResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result GetAccountsResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func GetAccounts(url string, client *http.Client, vars *GetAccountsVariables) (*GetAccountsResponse, error) {
	req, err := NewGetAccountsRequest(url, vars)
	if err != nil {
		return nil, err
	}
	return req.Execute(client)
}

func (client *Client) GetAccounts(vars *GetAccountsVariables) (*GetAccountsResponse, error) {
	return GetAccounts(client.Url, client.Client, vars)
}

//
// mutation CreateAccount($input: NewAccount!)
//

type CreateAccountVariables struct {
	Input NewAccount `json:"input"`
}

type CreateAccountResponse struct {
	CreateAccount struct {
		ID          string `json:"id"`
		Alias       string `json:"alias"`
		Description string `json:"description"`
		Provider    string `json:"provider"`
		State       struct {
			Status string `json:"status"`
			Error  string `json:"error"`
		} `json:"state"`
	} `json:"createAccount"`
}

type CreateAccountRequest struct {
	*http.Request
}

func NewCreateAccountRequest(url string, vars *CreateAccountVariables) (*CreateAccountRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `mutation CreateAccount($input: NewAccount!) {
  createAccount(input: $input) {
    id
    alias
    description
    provider
    state {
      status
      error
    }
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &CreateAccountRequest{req}, nil
}

func (req *CreateAccountRequest) Execute(client *http.Client) (*CreateAccountResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result CreateAccountResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func CreateAccount(url string, client *http.Client, vars *CreateAccountVariables) (*CreateAccountResponse, error) {
	req, err := NewCreateAccountRequest(url, vars)
	if err != nil {
		return nil, err
	}
	return req.Execute(client)
}

func (client *Client) CreateAccount(vars *CreateAccountVariables) (*CreateAccountResponse, error) {
	return CreateAccount(client.Url, client.Client, vars)
}

//
// mutation UpdateAccount($input: AccountChanges!)
//

type UpdateAccountVariables struct {
	Input AccountChanges `json:"input"`
}

type UpdateAccountResponse struct {
	UpdateAccount struct {
		ID          string `json:"id"`
		Alias       string `json:"alias"`
		Description string `json:"description"`
		Provider    string `json:"provider"`
		State       struct {
			Status string `json:"status"`
			Error  string `json:"error"`
		} `json:"state"`
	} `json:"updateAccount"`
}

type UpdateAccountRequest struct {
	*http.Request
}

func NewUpdateAccountRequest(url string, vars *UpdateAccountVariables) (*UpdateAccountRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `mutation UpdateAccount($input: AccountChanges!) {
  updateAccount(input: $input) {
    id
    alias
    description
    provider
    state {
      status
      error
    }
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &UpdateAccountRequest{req}, nil
}

func (req *UpdateAccountRequest) Execute(client *http.Client) (*UpdateAccountResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result UpdateAccountResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func UpdateAccount(url string, client *http.Client, vars *UpdateAccountVariables) (*UpdateAccountResponse, error) {
	req, err := NewUpdateAccountRequest(url, vars)
	if err != nil {
		return nil, err
	}
	return req.Execute(client)
}

func (client *Client) UpdateAccount(vars *UpdateAccountVariables) (*UpdateAccountResponse, error) {
	return UpdateAccount(client.Url, client.Client, vars)
}

//
// mutation DeleteAccount($input: CustomerAccountIdInput!)
//

type DeleteAccountVariables struct {
	Input CustomerAccountIdInput `json:"input"`
}

type DeleteAccountResponse struct {
	DeleteAccount string `json:"deleteAccount"`
}

type DeleteAccountRequest struct {
	*http.Request
}

func NewDeleteAccountRequest(url string, vars *DeleteAccountVariables) (*DeleteAccountRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `mutation DeleteAccount($input: CustomerAccountIdInput!) {
  deleteAccount(input: $input)
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &DeleteAccountRequest{req}, nil
}

func (req *DeleteAccountRequest) Execute(client *http.Client) (*DeleteAccountResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result DeleteAccountResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func DeleteAccount(url string, client *http.Client, vars *DeleteAccountVariables) (*DeleteAccountResponse, error) {
	req, err := NewDeleteAccountRequest(url, vars)
	if err != nil {
		return nil, err
	}
	return req.Execute(client)
}

func (client *Client) DeleteAccount(vars *DeleteAccountVariables) (*DeleteAccountResponse, error) {
	return DeleteAccount(client.Url, client.Client, vars)
}

//
// query GetDistributions($input: DistributionsInput!)
//

type GetDistributionsVariables struct {
	Input DistributionsInput `json:"input"`
}

type GetDistributionsResponse struct {
	Distributions struct {
		Results *[]struct {
			ID          string `json:"id"`
			Name        string `json:"name"`
			Description string `json:"description"`
			Provider    string `json:"provider"`
		} `json:"results"`
	} `json:"distributions"`
}

type GetDistributionsRequest struct {
	*http.Request
}

func NewGetDistributionsRequest(url string, vars *GetDistributionsVariables) (*GetDistributionsRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `query GetDistributions($input: DistributionsInput!) {
  distributions(input: $input) {
    results {
      id
      name
      description
      provider
    }
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &GetDistributionsRequest{req}, nil
}

func (req *GetDistributionsRequest) Execute(client *http.Client) (*GetDistributionsResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result GetDistributionsResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func GetDistributions(url string, client *http.Client, vars *GetDistributionsVariables) (*GetDistributionsResponse, error) {
	req, err := NewGetDistributionsRequest(url, vars)
	if err != nil {
		return nil, err
	}
	return req.Execute(client)
}

func (client *Client) GetDistributions(vars *GetDistributionsVariables) (*GetDistributionsResponse, error) {
	return GetDistributions(client.Url, client.Client, vars)
}

//
// query GetTemplate($input: CustomerTemplateIdInput!)
//

type GetTemplateVariables struct {
	Input CustomerTemplateIdInput `json:"input"`
}

type GetTemplateResponse struct {
	Template struct {
		ID          string `json:"id"`
		Name        string `json:"name"`
		Description string `json:"description"`
		Provider    string `json:"provider"`
		State       struct {
			Status string `json:"status"`
			Error  string `json:"error"`
		} `json:"state"`
	} `json:"template"`
}

type GetTemplateRequest struct {
	*http.Request
}

func NewGetTemplateRequest(url string, vars *GetTemplateVariables) (*GetTemplateRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `query GetTemplate($input: CustomerTemplateIdInput!) {
  template(input: $input) {
    id
    name
    description
    provider
    state {
      status
      error
    }
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &GetTemplateRequest{req}, nil
}

func (req *GetTemplateRequest) Execute(client *http.Client) (*GetTemplateResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result GetTemplateResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func GetTemplate(url string, client *http.Client, vars *GetTemplateVariables) (*GetTemplateResponse, error) {
	req, err := NewGetTemplateRequest(url, vars)
	if err != nil {
		return nil, err
	}
	return req.Execute(client)
}

func (client *Client) GetTemplate(vars *GetTemplateVariables) (*GetTemplateResponse, error) {
	return GetTemplate(client.Url, client.Client, vars)
}

//
// query GetTemplates($input: CustomerTemplatesInput!)
//

type GetTemplatesVariables struct {
	Input CustomerTemplatesInput `json:"input"`
}

type GetTemplatesResponse struct {
	Templates struct {
		Results *[]struct {
			ID          string `json:"id"`
			Name        string `json:"name"`
			Description string `json:"description"`
			Provider    string `json:"provider"`
			State       struct {
				Status string `json:"status"`
			} `json:"state"`
			Images struct {
				Results *[]struct {
					ID   string `json:"id"`
					Name string `json:"name"`
				} `json:"results"`
			} `json:"images"`
		} `json:"results"`
	} `json:"templates"`
}

type GetTemplatesRequest struct {
	*http.Request
}

func NewGetTemplatesRequest(url string, vars *GetTemplatesVariables) (*GetTemplatesRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `query GetTemplates($input: CustomerTemplatesInput!) {
  templates(input: $input) {
    results {
      id
      name
      description
      provider
      state {
        status
      }
      images(input: {page: 0, limit: 1}) {
        results {
          id
          name
        }
      }
    }
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &GetTemplatesRequest{req}, nil
}

func (req *GetTemplatesRequest) Execute(client *http.Client) (*GetTemplatesResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result GetTemplatesResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func GetTemplates(url string, client *http.Client, vars *GetTemplatesVariables) (*GetTemplatesResponse, error) {
	req, err := NewGetTemplatesRequest(url, vars)
	if err != nil {
		return nil, err
	}
	return req.Execute(client)
}

func (client *Client) GetTemplates(vars *GetTemplatesVariables) (*GetTemplatesResponse, error) {
	return GetTemplates(client.Url, client.Client, vars)
}

//
// mutation CreateTemplate($input: NewTemplate!)
//

type CreateTemplateVariables struct {
	Input NewTemplate `json:"input"`
}

type CreateTemplateResponse struct {
	CreateTemplate struct {
		ID          string `json:"id"`
		Name        string `json:"name"`
		Description string `json:"description"`
		Provider    string `json:"provider"`
		State       struct {
			Status string `json:"status"`
			Error  string `json:"error"`
		} `json:"state"`
	} `json:"createTemplate"`
}

type CreateTemplateRequest struct {
	*http.Request
}

func NewCreateTemplateRequest(url string, vars *CreateTemplateVariables) (*CreateTemplateRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `mutation CreateTemplate($input: NewTemplate!) {
  createTemplate(input: $input) {
    id
    name
    description
    provider
    state {
      status
      error
    }
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &CreateTemplateRequest{req}, nil
}

func (req *CreateTemplateRequest) Execute(client *http.Client) (*CreateTemplateResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result CreateTemplateResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func CreateTemplate(url string, client *http.Client, vars *CreateTemplateVariables) (*CreateTemplateResponse, error) {
	req, err := NewCreateTemplateRequest(url, vars)
	if err != nil {
		return nil, err
	}
	return req.Execute(client)
}

func (client *Client) CreateTemplate(vars *CreateTemplateVariables) (*CreateTemplateResponse, error) {
	return CreateTemplate(client.Url, client.Client, vars)
}

//
// mutation UpdateTemplate($input: TemplateChanges!)
//

type UpdateTemplateVariables struct {
	Input TemplateChanges `json:"input"`
}

type UpdateTemplateResponse struct {
	UpdateTemplate struct {
		ID          string `json:"id"`
		Name        string `json:"name"`
		Description string `json:"description"`
		Provider    string `json:"provider"`
		State       struct {
			Status string `json:"status"`
			Error  string `json:"error"`
		} `json:"state"`
	} `json:"updateTemplate"`
}

type UpdateTemplateRequest struct {
	*http.Request
}

func NewUpdateTemplateRequest(url string, vars *UpdateTemplateVariables) (*UpdateTemplateRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `mutation UpdateTemplate($input: TemplateChanges!) {
  updateTemplate(input: $input) {
    id
    name
    description
    provider
    state {
      status
      error
    }
  }
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &UpdateTemplateRequest{req}, nil
}

func (req *UpdateTemplateRequest) Execute(client *http.Client) (*UpdateTemplateResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result UpdateTemplateResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func UpdateTemplate(url string, client *http.Client, vars *UpdateTemplateVariables) (*UpdateTemplateResponse, error) {
	req, err := NewUpdateTemplateRequest(url, vars)
	if err != nil {
		return nil, err
	}
	return req.Execute(client)
}

func (client *Client) UpdateTemplate(vars *UpdateTemplateVariables) (*UpdateTemplateResponse, error) {
	return UpdateTemplate(client.Url, client.Client, vars)
}

//
// mutation DeleteTemplate($input: CustomerTemplateIdInput!)
//

type DeleteTemplateVariables struct {
	Input CustomerTemplateIdInput `json:"input"`
}

type DeleteTemplateResponse struct {
	DeleteTemplate string `json:"deleteTemplate"`
}

type DeleteTemplateRequest struct {
	*http.Request
}

func NewDeleteTemplateRequest(url string, vars *DeleteTemplateVariables) (*DeleteTemplateRequest, error) {
	variables, err := json.Marshal(vars)
	if err != nil {
		return nil, err
	}
	b, err := json.Marshal(&GraphQLOperation{
		Variables: variables,
		Query: `mutation DeleteTemplate($input: CustomerTemplateIdInput!) {
  deleteTemplate(input: $input)
}`,
	})
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return &DeleteTemplateRequest{req}, nil
}

func (req *DeleteTemplateRequest) Execute(client *http.Client) (*DeleteTemplateResponse, error) {
	resp, err := execute(client, req.Request)
	if err != nil {
		return nil, err
	}
	var result DeleteTemplateResponse
	if err := json.Unmarshal(resp.Data, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func DeleteTemplate(url string, client *http.Client, vars *DeleteTemplateVariables) (*DeleteTemplateResponse, error) {
	req, err := NewDeleteTemplateRequest(url, vars)
	if err != nil {
		return nil, err
	}
	return req.Execute(client)
}

func (client *Client) DeleteTemplate(vars *DeleteTemplateVariables) (*DeleteTemplateResponse, error) {
	return DeleteTemplate(client.Url, client.Client, vars)
}

//
// Scalars
//

type Int int32
type Float float64
type Boolean bool
type String string
type ID string
type Upload string

//
// Enums
//

type AccountAttribute string

const (
	AccountAttributeALIAS           AccountAttribute = "ALIAS"
	AccountAttributeCLOUDPROVIDERID AccountAttribute = "CLOUD_PROVIDER_ID"
	AccountAttributeCREATEDAT       AccountAttribute = "CREATED_AT"
	AccountAttributePROVIDER        AccountAttribute = "PROVIDER"
	AccountAttributeSTATUS          AccountAttribute = "STATUS"
)

type AccountStatus string

const (
	AccountStatusACCESSERROR   AccountStatus = "ACCESS_ERROR"
	AccountStatusACCESSMISSING AccountStatus = "ACCESS_MISSING"
	AccountStatusACCESSSUCCESS AccountStatus = "ACCESS_SUCCESS"
)

type BuildStatus string

const (
	BuildStatusIMAGEBUILDING   BuildStatus = "IMAGE_BUILDING"
	BuildStatusIMAGECREATED    BuildStatus = "IMAGE_CREATED"
	BuildStatusIMAGEERROR      BuildStatus = "IMAGE_ERROR"
	BuildStatusIMAGETESTING    BuildStatus = "IMAGE_TESTING"
	BuildStatusTEMPLATECREATED BuildStatus = "TEMPLATE_CREATED"
	BuildStatusTEMPLATEERROR   BuildStatus = "TEMPLATE_ERROR"
	BuildStatusTEMPLATEPENDING BuildStatus = "TEMPLATE_PENDING"
)

type CacheControlScope string

const (
	CacheControlScopePRIVATE CacheControlScope = "PRIVATE"
	CacheControlScopePUBLIC  CacheControlScope = "PUBLIC"
)

type ComponentAttribute string

const (
	ComponentAttributeCREATEDAT ComponentAttribute = "CREATED_AT"
	ComponentAttributeNAME      ComponentAttribute = "NAME"
	ComponentAttributeOSTYPES   ComponentAttribute = "OS_TYPES"
	ComponentAttributePROVIDERS ComponentAttribute = "PROVIDERS"
	ComponentAttributeSTAGE     ComponentAttribute = "STAGE"
	ComponentAttributeTYPE      ComponentAttribute = "TYPE"
)

type ComponentStage string

const (
	ComponentStageBUILD ComponentStage = "BUILD"
	ComponentStageTEST  ComponentStage = "TEST"
)

type ComponentType string

const (
	ComponentTypeCUSTOM ComponentType = "CUSTOM"
	ComponentTypeSYSTEM ComponentType = "SYSTEM"
)

type CustomerRoleBindingsAttribute string

const (
	CustomerRoleBindingsAttributeCREATEDAT CustomerRoleBindingsAttribute = "CREATED_AT"
	CustomerRoleBindingsAttributeKIND      CustomerRoleBindingsAttribute = "KIND"
	CustomerRoleBindingsAttributeROLE      CustomerRoleBindingsAttribute = "ROLE"
	CustomerRoleBindingsAttributeSUBJECT   CustomerRoleBindingsAttribute = "SUBJECT"
	CustomerRoleBindingsAttributeUPDATEDAT CustomerRoleBindingsAttribute = "UPDATED_AT"
)

type DistributionAttribute string

const (
	DistributionAttributeNAME      DistributionAttribute = "NAME"
	DistributionAttributeOSFAMILY  DistributionAttribute = "OS_FAMILY"
	DistributionAttributeOSSUBTYPE DistributionAttribute = "OS_SUBTYPE"
	DistributionAttributeOSTYPE    DistributionAttribute = "OS_TYPE"
	DistributionAttributePROVIDER  DistributionAttribute = "PROVIDER"
)

type ImageAttribute string

const (
	ImageAttributeBUILDENDTIME   ImageAttribute = "BUILD_END_TIME"
	ImageAttributeBUILDSTARTTIME ImageAttribute = "BUILD_START_TIME"
	ImageAttributeNAME           ImageAttribute = "NAME"
	ImageAttributeSTATUS         ImageAttribute = "STATUS"
)

type ImageStatus string

const (
	ImageStatusCREATED    ImageStatus = "CREATED"
	ImageStatusERROR      ImageStatus = "ERROR"
	ImageStatusPENDING    ImageStatus = "PENDING"
	ImageStatusSHAREERROR ImageStatus = "SHARE_ERROR"
)

type Kind string

const (
	KindAPIKEY Kind = "API_KEY"
	KindUSER   Kind = "USER"
)

type NotificationType string

const (
	NotificationTypePUBSUB  NotificationType = "PUB_SUB"
	NotificationTypeSNS     NotificationType = "SNS"
	NotificationTypeWEBHOOK NotificationType = "WEB_HOOK"
)

type OSFamily string

const (
	OSFamilyAMAZON      OSFamily = "AMAZON"
	OSFamilyCENTOS      OSFamily = "CENTOS"
	OSFamilyORACLELINUX OSFamily = "ORACLE_LINUX"
	OSFamilyOTHER       OSFamily = "OTHER"
	OSFamilyREDHAT      OSFamily = "REDHAT"
	OSFamilySUSE        OSFamily = "SUSE"
	OSFamilyUBUNTU      OSFamily = "UBUNTU"
	OSFamilyWINDOWS     OSFamily = "WINDOWS"
)

type OSSubtype string

const (
	OSSubtypeAMAZON      OSSubtype = "AMAZON"
	OSSubtypeCENTOS      OSSubtype = "CENTOS"
	OSSubtypeORACLELINUX OSSubtype = "ORACLE_LINUX"
	OSSubtypeREDHAT      OSSubtype = "REDHAT"
	OSSubtypeSUSE        OSSubtype = "SUSE"
	OSSubtypeUBUNTU      OSSubtype = "UBUNTU"
)

type OSType string

const (
	OSTypeLINUX   OSType = "LINUX"
	OSTypeWINDOWS OSType = "WINDOWS"
)

type Provider string

const (
	ProviderAWS      Provider = "AWS"
	ProviderAZURE    Provider = "AZURE"
	ProviderGCP      Provider = "GCP"
	ProviderIBMCLOUD Provider = "IBMCLOUD"
	ProviderVMWARE   Provider = "VMWARE"
)

type RebuildReasonType string

const (
	RebuildReasonTypeHARDENINGSCRIPTCHANGE RebuildReasonType = "HARDENING_SCRIPT_CHANGE"
	RebuildReasonTypeMANUAL                RebuildReasonType = "MANUAL"
	RebuildReasonTypeSECURITYCHECK         RebuildReasonType = "SECURITY_CHECK"
	RebuildReasonTypeSOURCEIMAGECHANGE     RebuildReasonType = "SOURCE_IMAGE_CHANGE"
	RebuildReasonTypeWEEKLYUPDATES         RebuildReasonType = "WEEKLY_UPDATES"
)

type Role string

const (
	RoleADMIN      Role = "ADMIN"
	RoleREADONLY   Role = "READ_ONLY"
	RoleSUPERADMIN Role = "SUPER_ADMIN"
)

type ScriptProvisioner string

const (
	ScriptProvisionerANSIBLE    ScriptProvisioner = "ANSIBLE"
	ScriptProvisionerPOWERSHELL ScriptProvisioner = "POWERSHELL"
	ScriptProvisionerSHELL      ScriptProvisioner = "SHELL"
)

type SearchAlgorithm string

const (
	SearchAlgorithmEXACTMATCH     SearchAlgorithm = "EXACT_MATCH"
	SearchAlgorithmFUZZYMATCH     SearchAlgorithm = "FUZZY_MATCH"
	SearchAlgorithmREGEXPMATCH    SearchAlgorithm = "REGEXP_MATCH"
	SearchAlgorithmSUBSTRINGMATCH SearchAlgorithm = "SUBSTRING_MATCH"
)

type ShellScriptProvisioner string

const (
	ShellScriptProvisionerPOWERSHELL ShellScriptProvisioner = "POWERSHELL"
	ShellScriptProvisionerSHELL      ShellScriptProvisioner = "SHELL"
)

type SortOrder string

const (
	SortOrderASC  SortOrder = "ASC"
	SortOrderDESC SortOrder = "DESC"
)

type TemplateAttribute string

const (
	TemplateAttributeBUILDSTARTTIME TemplateAttribute = "BUILD_START_TIME"
	TemplateAttributeCREATEDAT      TemplateAttribute = "CREATED_AT"
	TemplateAttributeNAME           TemplateAttribute = "NAME"
	TemplateAttributeOSFAMILY       TemplateAttribute = "OS_FAMILY"
	TemplateAttributePROVIDER       TemplateAttribute = "PROVIDER"
	TemplateAttributeSTATUS         TemplateAttribute = "STATUS"
	TemplateAttributeUPDATEDAT      TemplateAttribute = "UPDATED_AT"
)

//
// Inputs
//

type AccountChanges struct {
	Alias           *String                      `json:"alias,omitempty"`
	CloudProviderId *String                      `json:"cloudProviderId,omitempty"`
	Credentials     *AccountCredentials          `json:"credentials,omitempty"`
	Description     *String                      `json:"description,omitempty"`
	ID              String                       `json:"id"`
	Properties      *AccountCloudPropertiesInput `json:"properties,omitempty"`
	Provider        *Provider                    `json:"provider,omitempty"`
}

type AccountCloudPropertiesInput struct {
	AwsShareAccounts *[]String `json:"awsShareAccounts,omitempty"`
}

type AccountCredentials struct {
	Aws      *AWSCredentials      `json:"aws,omitempty"`
	Azure    *AzureCredentials    `json:"azure,omitempty"`
	Gcp      *GCPCredentials      `json:"gcp,omitempty"`
	Ibmcloud *IBMCloudCredentials `json:"ibmcloud,omitempty"`
}

type AccountsFilter struct {
	Exclusive *Boolean         `json:"exclusive,omitempty"`
	Field     AccountAttribute `json:"field"`
	Values    *[]String        `json:"values,omitempty"`
}

type AccountsFilters struct {
	Filters *[]AccountsFilter `json:"filters,omitempty"`
}

type AWSCredentials struct {
	Credentials *AWSCredentialsAccessKey `json:"credentials,omitempty"`
	Roles       *[]AWSCredentialsRole    `json:"roles,omitempty"`
}

type AWSCredentialsAccessKey struct {
	AWSACCESSKEYID     String `json:"AWS_ACCESS_KEY_ID"`
	AWSSECRETACCESSKEY String `json:"AWS_SECRET_ACCESS_KEY"`
}

type AWSCredentialsRole struct {
	Arn        String  `json:"arn"`
	ExternalId *String `json:"externalId,omitempty"`
}

type AzureCredentials struct {
	AppId              String `json:"appId"`
	Password           String `json:"password"`
	ResourceGroupName  String `json:"resourceGroupName"`
	SharedImageGallery String `json:"sharedImageGallery"`
	StorageAccount     String `json:"storageAccount"`
	StorageAccountKey  String `json:"storageAccountKey"`
	TenantId           String `json:"tenantId"`
}

type ComponentChanges struct {
	Description *String         `json:"description,omitempty"`
	ID          String          `json:"id"`
	Name        *String         `json:"name,omitempty"`
	OsTypes     *[]OSType       `json:"osTypes,omitempty"`
	Providers   *[]Provider     `json:"providers,omitempty"`
	Stage       *ComponentStage `json:"stage,omitempty"`
}

type ComponentIdInput struct {
	ComponentId String `json:"componentId"`
}

type ComponentsFilter struct {
	Exclusive *Boolean           `json:"exclusive,omitempty"`
	Field     ComponentAttribute `json:"field"`
	Values    *[]String          `json:"values,omitempty"`
}

type ComponentsFilters struct {
	Filters *[]ComponentsFilter `json:"filters,omitempty"`
}

type ComponentsInput struct {
	Filters       *ComponentsFilters `json:"filters,omitempty"`
	IncludeSystem *Boolean           `json:"includeSystem,omitempty"`
	Limit         *Int               `json:"limit,omitempty"`
	Page          *Int               `json:"page,omitempty"`
	Search        *Search            `json:"search,omitempty"`
	Sort          *ComponentsSort    `json:"sort,omitempty"`
}

type ComponentsSort struct {
	Field ComponentAttribute `json:"field"`
	Order SortOrder          `json:"order"`
}

type ComponentVersionIdInput struct {
	ComponentId String `json:"componentId"`
	Version     String `json:"version"`
}

type CustomerAccountIdInput struct {
	AccountId String `json:"accountId"`
}

type CustomerAccountsInput struct {
	Filters *AccountsFilters      `json:"filters,omitempty"`
	Limit   *Int                  `json:"limit,omitempty"`
	Page    *Int                  `json:"page,omitempty"`
	Search  *Search               `json:"search,omitempty"`
	Sort    *CustomerAccountsSort `json:"sort,omitempty"`
}

type CustomerAccountsResolverInput struct {
	Filters *AccountsFilters      `json:"filters,omitempty"`
	Limit   *Int                  `json:"limit,omitempty"`
	Page    *Int                  `json:"page,omitempty"`
	Search  *Search               `json:"search,omitempty"`
	Sort    *CustomerAccountsSort `json:"sort,omitempty"`
}

type CustomerAccountsSort struct {
	Field AccountAttribute `json:"field"`
	Order SortOrder        `json:"order"`
}

type CustomerApiKeyIdInput struct {
	ApiKeyId String `json:"apiKeyId"`
}

type CustomerApiKeysInput struct {
	Limit *Int `json:"limit,omitempty"`
	Page  *Int `json:"page,omitempty"`
}

type CustomerComponentsResolverInput struct {
	Filters       *ComponentsFilters `json:"filters,omitempty"`
	IncludeSystem *Boolean           `json:"includeSystem,omitempty"`
	Limit         *Int               `json:"limit,omitempty"`
	Page          *Int               `json:"page,omitempty"`
	Search        *Search            `json:"search,omitempty"`
	Sort          *ComponentsSort    `json:"sort,omitempty"`
}

type CustomerRoleBindingIdInput struct {
	RoleBindingId String `json:"roleBindingId"`
}

type CustomerRoleBindingsFilter struct {
	Exclusive *Boolean                      `json:"exclusive,omitempty"`
	Field     CustomerRoleBindingsAttribute `json:"field"`
	Values    *[]String                     `json:"values,omitempty"`
}

type CustomerRoleBindingsFilters struct {
	Filters *[]CustomerRoleBindingsFilter `json:"filters,omitempty"`
}

type CustomerRoleBindingsInput struct {
	Filters *CustomerRoleBindingsFilters `json:"filters,omitempty"`
	Limit   *Int                         `json:"limit,omitempty"`
	Page    *Int                         `json:"page,omitempty"`
	Search  *Search                      `json:"search,omitempty"`
	Sort    *CustomerRoleBindingsSort    `json:"sort,omitempty"`
}

type CustomerRoleBindingsSort struct {
	Field CustomerRoleBindingsAttribute `json:"field"`
	Order SortOrder                     `json:"order"`
}

type CustomersInput struct {
	Limit *Int `json:"limit,omitempty"`
	Page  *Int `json:"page,omitempty"`
}

type CustomerTemplateIdInput struct {
	TemplateId String `json:"templateId"`
}

type CustomerTemplatesInput struct {
	Filters *TemplatesFilters `json:"filters,omitempty"`
	Limit   *Int              `json:"limit,omitempty"`
	Page    *Int              `json:"page,omitempty"`
	Search  *Search           `json:"search,omitempty"`
	Sort    *TemplatesSort    `json:"sort,omitempty"`
}

type CustomerTemplatesResolverInput struct {
	Filters *TemplatesFilters `json:"filters,omitempty"`
	Limit   *Int              `json:"limit,omitempty"`
	Page    *Int              `json:"page,omitempty"`
	Search  *Search           `json:"search,omitempty"`
	Sort    *TemplatesSort    `json:"sort,omitempty"`
}

type CustomerVariableNameInput struct {
	VariableName String `json:"variableName"`
}

type DistributionIdInput struct {
	DistributionId String `json:"distributionId"`
}

type DistributionsFilter struct {
	Exclusive *Boolean              `json:"exclusive,omitempty"`
	Field     DistributionAttribute `json:"field"`
	Values    *[]String             `json:"values,omitempty"`
}

type DistributionsFilters struct {
	Filters *[]DistributionsFilter `json:"filters,omitempty"`
}

type DistributionsInput struct {
	Filters *DistributionsFilters `json:"filters,omitempty"`
	Limit   *Int                  `json:"limit,omitempty"`
	Page    *Int                  `json:"page,omitempty"`
	Search  *Search               `json:"search,omitempty"`
	Sort    *DistributionsSort    `json:"sort,omitempty"`
}

type DistributionsSort struct {
	Field DistributionAttribute `json:"field"`
	Order SortOrder             `json:"order"`
}

type GCPCredentials struct {
	AuthProviderX509CertUrl String `json:"authProviderX509CertUrl"`
	AuthUri                 String `json:"authUri"`
	ClientEmail             String `json:"clientEmail"`
	ClientId                String `json:"clientId"`
	ClientX509CertUrl       String `json:"clientX509CertUrl"`
	PrivateKey              String `json:"privateKey"`
	PrivateKeyId            String `json:"privateKeyId"`
	ProjectId               String `json:"projectId"`
	TokenUri                String `json:"tokenUri"`
	Type                    String `json:"type"`
}

type GetComponentInput struct {
	ComponentId String   `json:"componentId"`
	Presign     *Boolean `json:"presign,omitempty"`
}

type IBMCloudCredentials struct {
	Apikey            String `json:"apikey"`
	CosBucket         String `json:"cosBucket"`
	Region            String `json:"region"`
	ResourceGroupId   String `json:"resourceGroupId"`
	ResourceGroupName String `json:"resourceGroupName"`
}

type ImagesFilter struct {
	Exclusive *Boolean       `json:"exclusive,omitempty"`
	Field     ImageAttribute `json:"field"`
	Values    *[]String      `json:"values,omitempty"`
}

type ImagesFilters struct {
	Filters *[]ImagesFilter `json:"filters,omitempty"`
}

type NewAccount struct {
	Alias           *String                      `json:"alias,omitempty"`
	CloudProviderId String                       `json:"cloudProviderId"`
	Credentials     *AccountCredentials          `json:"credentials,omitempty"`
	Description     *String                      `json:"description,omitempty"`
	Properties      *AccountCloudPropertiesInput `json:"properties,omitempty"`
	Provider        Provider                     `json:"provider"`
}

type NewApiKey struct {
	Name String `json:"name"`
}

type NewComponent struct {
	Content     NewVersionedContent `json:"content"`
	Description *String             `json:"description,omitempty"`
	Name        String              `json:"name"`
	OsTypes     *[]OSType           `json:"osTypes,omitempty"`
	Providers   *[]Provider         `json:"providers,omitempty"`
	Stage       ComponentStage      `json:"stage"`
}

type NewComponentContent struct {
	Active            *Boolean               `json:"active,omitempty"`
	ID                String                 `json:"id"`
	Script            String                 `json:"script"`
	ScriptProvisioner ShellScriptProvisioner `json:"scriptProvisioner"`
}

type NewNotification struct {
	Type NotificationType `json:"type"`
	Uri  String           `json:"uri"`
}

type NewRoleBinding struct {
	Kind    Kind   `json:"kind"`
	Role    Role   `json:"role"`
	Subject String `json:"subject"`
}

type NewTag struct {
	Key   String `json:"key"`
	Value String `json:"value"`
}

type NewTemplate struct {
	Config         NewTemplateConfig `json:"config"`
	Description    *String           `json:"description,omitempty"`
	DistributionId String            `json:"distributionId"`
	Name           String            `json:"name"`
	Provider       Provider          `json:"provider"`
}

type NewTemplateAWSConfig struct {
	CustomImageName *String `json:"customImageName,omitempty"`
	Region          String  `json:"region"`
}

type NewTemplateAZUREConfig struct {
	ExcludeFromLatest *Boolean  `json:"excludeFromLatest,omitempty"`
	ReplicaRegions    *[]String `json:"replicaRegions,omitempty"`
}

type NewTemplateComponent struct {
	ID         String                          `json:"id"`
	Properties *[]NewTemplateComponentProperty `json:"properties,omitempty"`
	Version    *String                         `json:"version,omitempty"`
}

type NewTemplateComponentProperty struct {
	Name  String `json:"name"`
	Value String `json:"value"`
}

type NewTemplateConfig struct {
	Aws             *NewTemplateAWSConfig   `json:"aws,omitempty"`
	Azure           *NewTemplateAZUREConfig `json:"azure,omitempty"`
	BuildComponents *[]NewTemplateComponent `json:"buildComponents,omitempty"`
	Notifications   *[]NewNotification      `json:"notifications,omitempty"`
	Tags            *[]NewTag               `json:"tags,omitempty"`
	TestComponents  *[]NewTemplateComponent `json:"testComponents,omitempty"`
}

type NewVariable struct {
	Name  String `json:"name"`
	Value String `json:"value"`
}

type NewVersionedContent struct {
	Active            *Boolean               `json:"active,omitempty"`
	Script            String                 `json:"script"`
	ScriptProvisioner ShellScriptProvisioner `json:"scriptProvisioner"`
}

type RoleBindingChanges struct {
	ID   String `json:"id"`
	Role *Role  `json:"role,omitempty"`
}

type Search struct {
	Algorithm   SearchAlgorithm `json:"algorithm"`
	SearchValue String          `json:"searchValue"`
}

type TemplateChanges struct {
	Config      *NewTemplateConfig `json:"config,omitempty"`
	Description *String            `json:"description,omitempty"`
	ID          String             `json:"id"`
	Name        *String            `json:"name,omitempty"`
}

type TemplateImageIdInput struct {
	ImageId    String   `json:"imageId"`
	Presign    *Boolean `json:"presign,omitempty"`
	TemplateId String   `json:"templateId"`
}

type TemplateImages struct {
	Filters    *ImagesFilters      `json:"filters,omitempty"`
	Limit      *Int                `json:"limit,omitempty"`
	Page       *Int                `json:"page,omitempty"`
	Search     *Search             `json:"search,omitempty"`
	Sort       *TemplateImagesSort `json:"sort,omitempty"`
	TemplateId String              `json:"templateId"`
}

type TemplateImagesResolverInput struct {
	Filters *ImagesFilters      `json:"filters,omitempty"`
	Limit   *Int                `json:"limit,omitempty"`
	Page    *Int                `json:"page,omitempty"`
	Search  *Search             `json:"search,omitempty"`
	Sort    *TemplateImagesSort `json:"sort,omitempty"`
}

type TemplateImagesSort struct {
	Field ImageAttribute `json:"field"`
	Order SortOrder      `json:"order"`
}

type TemplatesFilter struct {
	Exclusive *Boolean          `json:"exclusive,omitempty"`
	Field     TemplateAttribute `json:"field"`
	Values    *[]String         `json:"values,omitempty"`
}

type TemplatesFilters struct {
	Filters *[]TemplatesFilter `json:"filters,omitempty"`
}

type TemplatesSort struct {
	Field TemplateAttribute `json:"field"`
	Order SortOrder         `json:"order"`
}

type Variable struct {
	Name String `json:"name"`
}

//
// Objects
//

type Account struct {
	Alias           *String                 `json:"alias,omitempty"`
	CloudProviderId String                  `json:"cloudProviderId"`
	CreatedAt       String                  `json:"createdAt"`
	Description     *String                 `json:"description,omitempty"`
	ID              String                  `json:"id"`
	Properties      *AccountCloudProperties `json:"properties,omitempty"`
	Provider        Provider                `json:"provider"`
	State           *AccountState           `json:"state,omitempty"`
	UpdatedAt       String                  `json:"updatedAt"`
}

type AccountCloudProperties struct {
	AwsShareAccounts *[]String `json:"awsShareAccounts,omitempty"`
}

type AccountResults struct {
	Count   Int        `json:"count"`
	Pages   Int        `json:"pages"`
	Results *[]Account `json:"results,omitempty"`
}

type AccountState struct {
	Error  *String       `json:"error,omitempty"`
	Status AccountStatus `json:"status"`
}

type ApiKey struct {
	CreatedAt String `json:"createdAt"`
	CreatedBy String `json:"createdBy"`
	ID        String `json:"id"`
	Name      String `json:"name"`
	Secret    String `json:"secret"`
	UpdatedAt String `json:"updatedAt"`
	UpdatedBy String `json:"updatedBy"`
}

type ApiKeyResults struct {
	Count   Int       `json:"count"`
	Pages   Int       `json:"pages"`
	Results *[]ApiKey `json:"results,omitempty"`
}

type Component struct {
	Content     *[]VersionedContent `json:"content,omitempty"`
	CreatedAt   String              `json:"createdAt"`
	CreatedBy   String              `json:"createdBy"`
	Description *String             `json:"description,omitempty"`
	ID          String              `json:"id"`
	Name        String              `json:"name"`
	OsTypes     *[]OSType           `json:"osTypes,omitempty"`
	Providers   *[]Provider         `json:"providers,omitempty"`
	Stage       ComponentStage      `json:"stage"`
	Type        ComponentType       `json:"type"`
	UpdatedAt   String              `json:"updatedAt"`
	UpdatedBy   String              `json:"updatedBy"`
}

type ComponentResults struct {
	Count   Int          `json:"count"`
	Pages   Int          `json:"pages"`
	Results *[]Component `json:"results,omitempty"`
}

type Customer struct {
	Accounts   *AccountResults   `json:"accounts,omitempty"`
	Components *ComponentResults `json:"components,omitempty"`
	CreatedAt  String            `json:"createdAt"`
	ID         String            `json:"id"`
	Name       String            `json:"name"`
	Templates  *TemplateResults  `json:"templates,omitempty"`
	UpdatedAt  String            `json:"updatedAt"`
}

type CustomerResults struct {
	Count   Int         `json:"count"`
	Pages   Int         `json:"pages"`
	Results *[]Customer `json:"results,omitempty"`
}

type Distribution struct {
	CreatedAt   String     `json:"createdAt"`
	Description *String    `json:"description,omitempty"`
	ID          String     `json:"id"`
	Name        String     `json:"name"`
	OsFamily    OSFamily   `json:"osFamily"`
	OsSubtype   *OSSubtype `json:"osSubtype,omitempty"`
	OsType      OSType     `json:"osType"`
	Provider    Provider   `json:"provider"`
	UpdatedAt   String     `json:"updatedAt"`
}

type DistributionResults struct {
	Count   Int             `json:"count"`
	Pages   Int             `json:"pages"`
	Results *[]Distribution `json:"results,omitempty"`
}

type Image struct {
	CreatedAt   String             `json:"createdAt"`
	Description *String            `json:"description,omitempty"`
	Details     *ImageBuildDetails `json:"details,omitempty"`
	ID          String             `json:"id"`
	Name        String             `json:"name"`
	Provider    Provider           `json:"provider"`
	State       ImageState         `json:"state"`
	TemplateId  String             `json:"templateId"`
	UpdatedAt   String             `json:"updatedAt"`
}

type ImageBuildDetails struct {
	BuildComponents    *[]ImageComponent         `json:"buildComponents,omitempty"`
	BuildEndTime       *String                   `json:"buildEndTime,omitempty"`
	BuildStartTime     *String                   `json:"buildStartTime,omitempty"`
	BuildTimeSec       *Int                      `json:"buildTimeSec,omitempty"`
	ChangeLog          *String                   `json:"changeLog,omitempty"`
	CloudDistributions *[]ImageCloudDistribution `json:"cloudDistributions,omitempty"`
	ResultImageId      *String                   `json:"resultImageId,omitempty"`
	ResultImageUri     *String                   `json:"resultImageUri,omitempty"`
	SourceImage        *String                   `json:"sourceImage,omitempty"`
	Tags               *[]Tag                    `json:"tags,omitempty"`
	TestComponents     *[]ImageComponent         `json:"testComponents,omitempty"`
}

type ImageCloudDistribution struct {
	AccountId       String  `json:"accountId"`
	CloudProviderId String  `json:"cloudProviderId"`
	Error           *String `json:"error,omitempty"`
	ResultImageId   *String `json:"resultImageId,omitempty"`
}

type ImageComponent struct {
	ID      String  `json:"id"`
	Name    *String `json:"name,omitempty"`
	Version String  `json:"version"`
}

type ImageResults struct {
	Count   Int      `json:"count"`
	Pages   Int      `json:"pages"`
	Results *[]Image `json:"results,omitempty"`
}

type ImageState struct {
	Error  *String     `json:"error,omitempty"`
	Status ImageStatus `json:"status"`
}

type Mutation struct {
	CreateAccount             Account         `json:"createAccount"`
	CreateApiKey              ApiKey          `json:"createApiKey"`
	CreateComponent           Component       `json:"createComponent"`
	CreateComponentVersion    Component       `json:"createComponentVersion"`
	CreateRoleBinding         RoleBinding     `json:"createRoleBinding"`
	CreateTemplate            Template        `json:"createTemplate"`
	CreateVariable            VariableResults `json:"createVariable"`
	DeleteAccount             *Boolean        `json:"deleteAccount,omitempty"`
	DeleteApiKey              *Boolean        `json:"deleteApiKey,omitempty"`
	DeleteComponent           *Boolean        `json:"deleteComponent,omitempty"`
	DeleteComponentVersion    *Boolean        `json:"deleteComponentVersion,omitempty"`
	DeleteRoleBinding         *Boolean        `json:"deleteRoleBinding,omitempty"`
	DeleteTemplate            *Boolean        `json:"deleteTemplate,omitempty"`
	DeleteVariable            *Boolean        `json:"deleteVariable,omitempty"`
	RebuildTemplate           Template        `json:"rebuildTemplate"`
	SetComponentVersionActive Component       `json:"setComponentVersionActive"`
	UpdateAccount             Account         `json:"updateAccount"`
	UpdateComponent           Component       `json:"updateComponent"`
	UpdateRoleBinding         RoleBinding     `json:"updateRoleBinding"`
	UpdateTemplate            Template        `json:"updateTemplate"`
}

type Notification struct {
	Type NotificationType `json:"type"`
	Uri  String           `json:"uri"`
}

type Query struct {
	Account       Account             `json:"account"`
	Accounts      AccountResults      `json:"accounts"`
	ApiKey        ApiKey              `json:"apiKey"`
	ApiKeys       ApiKeyResults       `json:"apiKeys"`
	Component     Component           `json:"component"`
	Components    ComponentResults    `json:"components"`
	Customer      Customer            `json:"customer"`
	Customers     CustomerResults     `json:"customers"`
	Distribution  Distribution        `json:"distribution"`
	Distributions DistributionResults `json:"distributions"`
	Image         Image               `json:"image"`
	Images        ImageResults        `json:"images"`
	RoleBinding   RoleBinding         `json:"roleBinding"`
	RoleBindings  RoleBindingResults  `json:"roleBindings"`
	Template      Template            `json:"template"`
	Templates     TemplateResults     `json:"templates"`
	Variables     VariableResults     `json:"variables"`
}

type Rebuild struct {
	Reason *[]RebuildReason `json:"reason,omitempty"`
}

type RebuildReason struct {
	Description *String           `json:"description,omitempty"`
	Type        RebuildReasonType `json:"type"`
}

type RoleBinding struct {
	CreatedAt String `json:"createdAt"`
	CreatedBy String `json:"createdBy"`
	ID        String `json:"id"`
	Kind      Kind   `json:"kind"`
	Role      Role   `json:"role"`
	Subject   String `json:"subject"`
	UpdatedAt String `json:"updatedAt"`
	UpdatedBy String `json:"updatedBy"`
}

type RoleBindingResults struct {
	Count   Int            `json:"count"`
	Pages   Int            `json:"pages"`
	Results *[]RoleBinding `json:"results,omitempty"`
}

type Tag struct {
	Key   String `json:"key"`
	Value String `json:"value"`
}

type Template struct {
	Config         *TemplateConfig `json:"config,omitempty"`
	CreatedAt      String          `json:"createdAt"`
	CreatedBy      String          `json:"createdBy"`
	CustomerId     String          `json:"customerId"`
	Description    *String         `json:"description,omitempty"`
	Distribution   *Distribution   `json:"distribution,omitempty"`
	DistributionId String          `json:"distributionId"`
	ID             String          `json:"id"`
	Images         *ImageResults   `json:"images,omitempty"`
	Name           String          `json:"name"`
	OsFamily       OSFamily        `json:"osFamily"`
	Provider       Provider        `json:"provider"`
	Rebuild        *Rebuild        `json:"rebuild,omitempty"`
	State          TemplateState   `json:"state"`
	UpdatedAt      String          `json:"updatedAt"`
	UpdatedBy      String          `json:"updatedBy"`
}

type TemplateAWSConfig struct {
	CustomImageName *String `json:"customImageName,omitempty"`
	Region          String  `json:"region"`
}

type TemplateAZUREConfig struct {
	ExcludeFromLatest *Boolean  `json:"excludeFromLatest,omitempty"`
	ReplicaRegions    *[]String `json:"replicaRegions,omitempty"`
}

type TemplateComponent struct {
	ID         String                       `json:"id"`
	Name       *String                      `json:"name,omitempty"`
	Properties *[]TemplateComponentProperty `json:"properties,omitempty"`
	Version    *String                      `json:"version,omitempty"`
}

type TemplateComponentProperty struct {
	Name  String `json:"name"`
	Value String `json:"value"`
}

type TemplateConfig struct {
	Aws             *TemplateAWSConfig   `json:"aws,omitempty"`
	Azure           *TemplateAZUREConfig `json:"azure,omitempty"`
	BuildComponents *[]TemplateComponent `json:"buildComponents,omitempty"`
	Notifications   *[]Notification      `json:"notifications,omitempty"`
	Tags            *[]Tag               `json:"tags,omitempty"`
	TestComponents  *[]TemplateComponent `json:"testComponents,omitempty"`
}

type TemplateResults struct {
	Count   Int         `json:"count"`
	Pages   Int         `json:"pages"`
	Results *[]Template `json:"results,omitempty"`
}

type TemplateState struct {
	BuildStartTime   *String     `json:"buildStartTime,omitempty"`
	Error            *String     `json:"error,omitempty"`
	LastBuildTimeSec *Int        `json:"lastBuildTimeSec,omitempty"`
	Status           BuildStatus `json:"status"`
}

type VariableResults struct {
	Results *[]String `json:"results,omitempty"`
}

type VersionedContent struct {
	Active            Boolean           `json:"active"`
	AnsibleTags       *[]String         `json:"ansibleTags,omitempty"`
	DocsUrl           *String           `json:"docsUrl,omitempty"`
	ScriptProvisioner ScriptProvisioner `json:"scriptProvisioner"`
	ScriptUrl         *String           `json:"scriptUrl,omitempty"`
	Version           String            `json:"version"`
}
